{"api-documentation":"_dfuse_ API 有2个部分：一个是基于 Websocket 的 API，被称为 `eosws`,\n还有一个是 REST API.\n\n  * [认证](#authentication)\n  * [基于 Websocket 的 API](#websockets-based-api)\n    * [消息格式](#messages-format)\n    * [请求](#ws-requests)\n  * [REST API](#rest-api)\n","authentication":"第一步, 获取免费的 API 密钥 (一个JWT).\n\n* Websocket：把你的代币作为一个叫 `token` 的_查询参数_发出  。 例子:\n\n```\nws wss://mainnet.eos.dfuse.io/v1/stream?token=eyJ..YOURTOKENHERE...\n```\n\n* REST: 在 `Authorization` 标头里发出你的代币，作为一个 _Bearer_。例子：\n\n```\nGET /v1/table_snapshot\nHost: api.mainnet.eos.dfuse.io\nAuthorization: Bearer eyJ..YOURTOKENHERE...\n```\n\n**注意**: 你需要使用 `Origin` 标头来做 websockets 连接\n  到我们的端点.\n","changelog":"","endpoints":"以下是 dfuse API 的不同端点：\n\n链 `aca376f2...` 的端点 (**EOS主网**):\n\n  * wss://mainnet.eos.dfuse.io/v1/stream\n  * https://mainnet.eos.dfuse.io/\n链 `5fff1dae...` 的端点 (**麒麟测试网**):\n\n  * wss://kylin.eos.dfuse.io/v1/stream\n  * https://kylin.eos.dfuse.io/\n","message-format":"所有的请求都是使用这些参数的，其中`type`是请求的类型，`req_id`是之后命令引用的代币\n（客户端或服务器）。\n\n```\n{\"type\": \"[REQUEST_NAME]\"`,\n \"req_id\": \"some-string-of-your-choosing\",\n ...\n}\n```\n\n这些参数可用于大多数命令（除非另有说明）：\n\n* `type` **[string](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)** 消息的类型。请见下面的[请求](#requests)。\n* `req_id` **[string](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)?** 你要发送给自己的ID，以获取与此请求相关的任何回复。\n* `start_block` **[number](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number)?** 要启动处理的区块。它可以是一个绝对值区块号，或者是一个负数值。负数值是代表链上当前区块之前的第几个区块，比如： `-2500` 的意思是当前区块的以前的第2500个区块 \n* `fetch` **[boolean](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean)?** 获取所请求实体的初始快照。\n* `listen` **[boolean](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean)?** 侦听所请求实体的更改。\n* `data` **[object](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object)** 一个自由形式的对象，取决于请求的 `type`。 见下文。\n* `with_progress` **[number](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number)?** 区块处理进度的频率（在 `req_id` 的范围内）。你将最多每250毫秒收到 _1个_ 通知（在区块处理量大和`blockNum％frequency == 0`的情况下）。当你收到与一个流有关的进度通知时（由其 `req_id` 所标识），它保证你会看到那个流所产出（在之前的 `progress` 通知和收到的通知之间）的所有消息。\n","rest-api":"REST API 包括：\n\n* 在任何区块高度获取链上任何表格的快照。\n* 提交交易并等待它被放入区块，然后反馈包含它的区块的痕迹\n* 在返回之前提交交易并等待区块不可逆，并且反馈不可逆区块的执行痕迹。\n* **(预览版)** 获取指定交易ID的可逆性分数。\n","websockets-based-api":"这个基于 Websockets 的 API 融合了批处理和 streaming （流/实时反馈）\n能力，为你提供一个可靠性高的端点。\n\n大多数操作都可以获取初始状态（使用`fetch = true`），然后流式读取\n后续的更改（使用`listen = true`）。\n","ws-requests":"### `get_actions` 请求\n\n检索一个操作流，由 `receiver` 和 `account` 过滤\n\n```json\n{\"type\": \"get_actions\",\n \"listen\": true,\n \"data\": {\n    \"account\": \"eosio.token\",\n    \"action_name\": \"transfer\",\n }}\n```\n\n`data` 字段：\n\n  * `account` **[string](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)** 该操作所针对的合约帐户。\n  * `receiver` **[string](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)?** 指定执行其智能合约的接收者帐户。如果留空，则默认为与 `account`相同的值。\n  * `action_name` **[string](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)?** 在 `account` 合约中所调用的操作的名称。\n  * `with_ram_costs` **[boolean](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean)?** 流式读取RAM计费更改和每个操作所产生的存储成本的原因。\n  * `with_inline_traces` **[boolean](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean)?** 流式读取每个操作产生的内联操作。\n  * `with_deferred` **[boolean](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean)?** \n流式读取每个操作生成的延迟交易的更变。\n\n\n### `get_transaction` 请求\n\n检索交易并跟踪其生命周期。BETA：某些生命周期事件仍在产生过程中。\n\n```json\n{\"type\": \"get_transaction\", \"data\": {\"id\": \"abcdef123123123...\"}}\n```\n\n`data` 字段：\n\n  * `id` **[string](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)** 你想要跟踪的交易ID。\n\n\n### `get_table_rows` 请求\n\n流式检索因正在执行的交易/操作所产生的表的更改。\n\n```json\n{\"type\": \"get_table_rows\",\n \"req_id\": \"123\",\n \"listen\": true,\n \"data\": {\n   \"code\": \"eosio.token\",\n   \"scope\": \"eoscanadacom\",\n   \"table_name\": \"accounts\",\n   \"json\": true,\n   \"verbose\": true\n }\n}\n```\n\n`data` fields:\n\n  * `code`  **[string](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)** 向表格中写入过的合约帐户。\n  * `scope`  **[string](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)** 存储表的_scope_表。\n  * `table_name`  **[string](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)**  _name_表，显示在合同ABI中。\n  * `json` **[boolean](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean)?** 有了 `json = true`（或`1`），使用所查询的区块上活跃的ABI，表行将被解码为JSON。 因此，该端点将自动适应链上ABI的升级。\n   * `verbose` **[boolean](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean)? 沿着每一行反馈 `code`， `table_name`， `scope` 和 `key` 。\n\n\n### `unlisten` 请求\n\n要中断流读取，你可以用原始的 `req_id` 来 `unlisten`，就像这样：\n\n```json\n{\"type\": \"unlisten\", \"data\": {\"req_id\": \"original-request-id\"}}\n```\n\n`data` 字段：\n\n  * `req_id` **[string](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)** 传递给之前的命令的`req_id`，其中包括`listen = true`。\n"}